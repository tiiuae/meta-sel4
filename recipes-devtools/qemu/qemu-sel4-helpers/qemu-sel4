#!/bin/sh

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    cat << EOF
Run QEMU as virtio device provider for seL4 VMs.

usage: $0 [-h|--help]
EOF
    exit 0
fi

# guest memory size in megabytes
# TODO: autoprobe from uio
GUEST_MEMSZ=${GUEST_MEMSZ:-256}

# rootfs for guest
GUEST_IMG="${GUEST_IMG:-/var/lib/virt/images/user-vm.qcow2}"
# directory shared to guest
GUEST_SHARED="${GUEST_SHARED:-$HOME/.local/share/virt/shared}"
mkdir -p "$GUEST_SHARED"

GUEST_GUI_ARGS="${GUEST_GUI_ARGS:--vga none -display none}"

QEMU_APPEND_BOOTARGS=""
QEMU_EXTRA_ARGS="${GUEST_GUI_ARGS}"

modprobe sel4_virt

ulimit -c unlimited

exec /usr/bin/qemu-system-aarch64 \
    `# minicom already uses ^A, change monitor escape to ^T` \
    -echr 0x14 \
    `# do not touch these` \
    --accel sel4 \
    -M virt \
    -m ${GUEST_MEMSZ}m \
    `# virtio-blk device for guest rootfs` \
    -device virtio-blk-pci,drive=drive0,id=virtblk0 \
    -drive format=qcow2,file=${GUEST_IMG},if=none,id=drive0 \
    `# share directory to guest over 9P` \
    -virtfs local,path=${GUEST_SHARED},mount_tag=shared,security_model=mapped-xattr \
    `# debug messages, use monitor to read them` \
    -chardev ringbuf,id=debug,size=64K \
    `# enable multiplexer on stdio to have both guest and monitor` \
    -chardev stdio,id=mon,mux=on,signal=off \
    `# enable monitor` \
    -mon chardev=mon,mode=readline \
    `# virtio-console` \
    -device virtio-serial-pci \
    -device virtconsole,chardev=mon,id=console0,name=qemu.uservm \
    `# TUN/TAP networking` \
    -netdev tap,id=net0,ifname=tap0,script=no,downscript=no \
    -device virtio-net-pci,netdev=net0 \
    `# no serial, emulating pl011 @ 0x09000000 in seL4 code` \
    -serial none \
    `# extra options` \
    ${QEMU_EXTRA_ARGS} \
    ${QEMU_APPEND_BOOTARGS:+-append "${QEMU_APPEND_BOOTARGS}"} \
    `# that's it!`
