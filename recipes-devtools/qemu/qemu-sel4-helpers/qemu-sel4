#!/bin/sh

set -e

# NOTE: GNU getopt required on FreeBSD and Mac OS X
TEMP=$(getopt -o B:b:chi:n:r:s: --long cachedblock:,block:,console,help,id:,net:,ramdisk:,shared: -n qemu-sel4 -- "$@")

eval set -- "$TEMP"

usage () {
    if [ -n "$1" ]; then
        echo "ERROR: $1" 1>&2
    fi
    cat << EOF
Run QEMU as virtio device provider for seL4 VMs.

usage: $0 [-h|--help]
EOF
    if [ -n "$1" ]; then
        exit 1
    else
        exit 0
    fi
}

VMTMPDIR=$(mktemp -d)

VMID=""

GUEST_9P_ARGS=""
GUEST_BLK_ARGS=""
GUEST_GUI_ARGS="${GUEST_GUI_ARGS:--vga none -display none}"

BLKID=0
NETIF=""
CONSOLE=false

while true; do
    BLKIMG=""
    case "$1" in
        -B | --cachedblock)
            cp "$2" ${VMTMPDIR}
            BLKIMG=${VMTMPDIR}/$(basename "$2")
            BLKFMT="qcow2"
            shift 2;;
        -b | --block)
            BLKIMG="$2"
            BLKFMT="qcow2"
            shift 2;;
        -c | --console)
            CONSOLE=true
            shift;;
        -h | --help)
            usage
            shift;;
        -i | --id)
            VMID="$2"
            shift 2;;
        -n | --net)
            NETIF="$2"
            shift 2;;
        -r | --ramdisk)
            BLKIMG=${VMTMPDIR}/ramdisk${BLKID}.raw
            BLKFMT="raw"
            qemu-img create -f ${BLKFMT} ${BLKIMG} "$2"
            mke2fs ${BLKIMG}
            shift 2;;
        -s | --shared)
            GUEST_9P_ARGS="${GUEST_9P_ARGS} -virtfs local,path=$2,mount_tag=shared,security_model=mapped-xattr"
            shift 2;;
        --)
            shift
            break;;
        *)
            break;;
    esac
    if [ -n "${BLKIMG}" ]; then
        GUEST_BLK_ARGS="${GUEST_BLK_ARGS} -device virtio-blk-pci,drive=drive${BLKID},id=virtblk${BLKID}"
        GUEST_BLK_ARGS="${GUEST_BLK_ARGS} -drive format=${BLKFMT},file=${BLKIMG},if=none,id=drive${BLKID}"
        BLKID=$((${BLKID} + 1))
    fi
done

if [ -z "${VMID}" ]; then
    usage "VMID must be specified with -i argument"
fi

# qemu reads VMID from its environment, hence we need to export it
export VMID

GUEST_NET_ARGS=""
GUEST_CONSOLE_ARGS=""

if [ -z "${NETIF}" ]; then
    GUEST_NET_ARGS="${GUEST_NET_ARGS} -nic none"
else
    MAC_ADDR="02:ca:fe:f0:0d:"$(printf "%02x" $((${VMID} + 32)))
    GUEST_NET_ARGS="${GUEST_NET_ARGS} -netdev tap,id=net${VMID},ifname="${NETIF}",script=no,downscript=no"
    GUEST_NET_ARGS="${GUEST_NET_ARGS} -device virtio-net-pci,netdev=net${VMID},mac="${MAC_ADDR}
fi

if [ "${CONSOLE}" = true ]; then
   GUEST_CONSOLE_ARGS="${GUEST_CONSOLE_ARGS} -device virtio-serial-pci"
   GUEST_CONSOLE_ARGS="${GUEST_CONSOLE_ARGS} -device virtconsole,chardev=mon,id=console"${VMID}",name=vm"${VMID}
fi

QEMU_APPEND_BOOTARGS=""
QEMU_EXTRA_ARGS="${GUEST_CONSOLE_ARGS} ${GUEST_BLK_ARGS} ${GUEST_GUI_ARGS} ${GUEST_NET_ARGS} ${GUEST_9P_ARGS}"

# Decode args like 'uservm=1,0x48000000,0x10000000,0x60000000,0x10000000'
# TODO: use device tree
GUEST_MEMSZ=`while read -d' ' p; do
    echo $p | grep '^uservm='${VMID}',' | cut -f3 -d, | xargs -Isz printf "%d" sz
done < /proc/cmdline`

if test -n "${GUEST_MEMSZ}"; then
    # using seL4
    GUEST_MEMSZ=`expr ${GUEST_MEMSZ} / 1048576`
    ACCEL=sel4
fi
GUEST_MEMSZ=${GUEST_MEMSZ:-256}

if test "x${ACCEL}" = "xsel4"; then
    modprobe sel4_virt
else
    # using something else, let's default to KVM
    QEMU_APPEND_BOOTARGS="${QEMU_APPEND_BOOTARGS} console=hvc0 root=/dev/vda2"
    QEMU_EXTRA_ARGS="${QEMU_EXTRA_ARGS} -kernel /boot/Image -cpu host"
    ACCEL=kvm
fi

# catch all core dumps
ulimit -c unlimited

exec /usr/bin/qemu-system-aarch64 \
    `# minicom already uses ^A, change monitor escape to ^T` \
    -echr 0x14 \
    `# do not touch these` \
    --accel ${ACCEL} \
    -M virt \
    -m ${GUEST_MEMSZ}m \
    `# debug messages, use monitor to read them` \
    -chardev ringbuf,id=debug,size=64K \
    `# enable multiplexer on stdio to have both guest and monitor` \
    -chardev stdio,id=mon,mux=on,signal=off \
    `# enable monitor` \
    -mon chardev=mon,mode=readline \
    `# no serial, emulating pl011 @ 0x09000000 in seL4 code` \
    -serial none \
    `# extra options` \
    ${QEMU_EXTRA_ARGS} \
    ${QEMU_APPEND_BOOTARGS:+-append "${QEMU_APPEND_BOOTARGS}"} \
    `# that's it!`
